/*
 * Construction of pedigree charts
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ged.h"
#include "croll.h"
#include "chart.h"
#include "pathnames.h"
#include "bit.h"

#define PEDIGREE_WIDTH 3
int  pass = 0;  //have we looped

void output_pedigree( FILE *ofile, ged_type *rt )
{
int *widths, i;
ged_type *name;
char *title;
unsigned int glob_map[8];

	for(i = 0; i < 8; i++)
		glob_map[i] = 0;

	if(name = find_type(rt, NAME))
		title = name->data;
	else
		title = "unknown";
      
	//compute_pedigree_widths(rt, depth, widths);
	fprintf(ofile, "<HTML><TITLE>%s Ances.</TITLE><NAME=\"IndexWindow\">\n<BODY><HR>\n<PRE>\n", title);
	pass++;
	output_pedigree_info(ofile, rt, 0, 0, glob_map, 0);
	fprintf(ofile,"</pre><b>Go to the Tree's </b><A HREF=\"http://www.cs.auckland.ac.nz/~rob/FamilyTree/\" ><b>Entry Page</b></A>.<p>\n");
	fprintf(ofile,"<hr>Maintained by <A HREF=\"mailto:rob@cs.auckland.ac.nz\">Rob Burrowes</A>.<br>\n");
	fprintf(ofile,"Rob's <A HREF=\"http://www.cs.auckland.ac.nz/~rob/\" >Home Page</A>\n");
	fprintf(ofile, "</BODY></HTML>\n");
	fprintf(ofile, "</BODY></HTML>\n");
}

void output_decendants( FILE *ofile, ged_type *rt )
{
int *widths, i;
ged_type *name;
char *title;
unsigned int glob_map[8];

	for(i = 0; i < 8; i++)
		glob_map[i] = 0;

	if(name = find_type(rt, NAME))
		title = name->data;
	else
		title = "unknown";
      
	//compute_pedigree_widths(rt, depth, widths);
	fprintf(ofile, "<HTML><TITLE>%s Desc.</TITLE><NAME=\"IndexWindow\">\n<BODY><HR>\n<PRE>\n", title);
	pass++;
	output_decendants_info(ofile, rt, 0, 0, glob_map);
	fprintf(ofile,"</pre><b>Go to the Tree's </b><A HREF=\"http://www.cs.auckland.ac.nz/~rob/FamilyTree/\" ><b>Entry Page</b></A>.<p>\n");
	fprintf(ofile,"<hr>Maintained by <A HREF=\"mailto:rob@cs.auckland.ac.nz\">Rob Burrowes</A>.<br>\n");
	fprintf(ofile,"Rob's <A HREF=\"http://www.cs.auckland.ac.nz/~rob/\" >Home Page</A>\n");
	fprintf(ofile, "</BODY></HTML>\n");
}

void output_decendants_of_name( FILE *ofile, ged_type *rt)
{
int *widths, i;
ged_type *name;
char *title;
unsigned int glob_map[8];

	for(i = 0; i < 8; i++)
		glob_map[i] = 0;

	if(name = find_type(rt, NAME))
		title = name->data;
	else
		title = "unknown";
      
	//compute_pedigree_widths(rt, depth, widths);
	fprintf(ofile, "<HTML><TITLE>%s Desc.(R.)</TITLE><<NAME=\"IndexWindow\">\n<BODY><HR>\n<PRE>\n", title);
	pass++;
	output_decendants_info_of_name(ofile, rt, 0, 0, glob_map);
	fprintf(ofile,"</pre><b>Go to the Tree's </b><A HREF=\"http://www.cs.auckland.ac.nz/~rob/FamilyTree/\" ><b>Entry Page</b></A>.<p>\n");
	fprintf(ofile,"<hr>Maintained by <A HREF=\"mailto:rob@cs.auckland.ac.nz\">Rob Burrowes</A>.<br>\n");
	fprintf(ofile,"Rob's <A HREF=\"http://www.cs.auckland.ac.nz/~rob/\" >Home Page</A>\n");
	fprintf(ofile, "</BODY></HTML>\n");
}


void output_pedigree_info
(
	FILE *ofile, 
	ged_type *rt,
	int curdepth,
	int direction,
	unsigned int *glob_map,
	char *child_marker
)
{
ged_type *famc;
ged_type *fams;
ged_type *family;
ged_type *husb, *wife;
ged_type *husb_rec, *wife_rec;

    if(rt) 
    {

    	if((famc = find_type(rt, FAMC)))
			family = find_hash(famc->data);
		else
			family = 0;
		fams = find_type(rt, FAMS);
				
    	if(rt->processed == pass)
		{	//A loop has occured. Print the record with a * and return
			output_pedigree_name(ofile, rt, curdepth, famc, fams, glob_map, "*",  child_marker, direction);
			if(direction)
				setbit(glob_map,curdepth);	//IF you are male parent then set this level bit
			else
				clearbit(glob_map,curdepth);	//below female parent we don't want the bit set
			print_bars(ofile, glob_map, curdepth); 
			fputc( '\n', ofile);
			clearbit(glob_map,curdepth);		//below this level we don't want the bit set
			return;
		}
			
		rt->processed = pass;			

		if(  family 
		 && (husb = find_type(family, HUSB))
		 && (husb_rec = find_hash(husb->data)))
		{
			output_pedigree_info(ofile, husb_rec, curdepth + 1, 1, glob_map, rt->data );
		}

		output_pedigree_name(ofile, rt, curdepth, famc, fams, glob_map, "", child_marker, direction);

		if(direction)
			setbit(glob_map, curdepth);	//IF you are male parent then set this level bit
		else
			clearbit(glob_map, curdepth);	//below female parent we don't want the bit set

		if(  family
		 && (wife = find_type(family, WIFE))
		 && (wife_rec = find_hash(wife->data)))
		{
			setbit(glob_map, curdepth+1); //set the next level line drawing bit
			print_bars(ofile, glob_map, curdepth + 1); 
			fputc( '\n', ofile); 
			output_pedigree_info(ofile, wife_rec, curdepth + 1, 0 , glob_map, rt->data);
		}
		else
		{
			print_bars(ofile, glob_map, curdepth); 
			fputc( '\n', ofile);
		} 

		clearbit(glob_map, curdepth);	//below this level we don't want the bit set
										//Not That it will be printed anyway.
    }
}


void output_decendants_info
(
	FILE *ofile, 
	ged_type *rt,
	int curdepth,
	int direction,
	unsigned int *glob_map
)
{
ged_type *famc;
ged_type *fams;
ged_type *child;
ged_type *marr;
ged_type *date;
ged_type *plac;
ged_type *child_rec;
ged_type *family;
ged_type *husb, *wife;
ged_type *husb_rec, *wife_rec;
int mcount = 0 ;

    if(rt) 
    {
    	if((fams = find_type(rt, FAMS))) //look for a spouse and family
			family = find_hash(fams->data);
		else
			family = 0;
		famc = find_type(rt, FAMC);
		
    	if(rt->processed == pass)
		{	//A loop has occured. Print the record with a * and return
			output_pedigree_name(ofile, rt, curdepth, famc, fams, glob_map, "*", 0, 1);
			return;
		}
			
		rt->processed = pass;
					
		output_pedigree_name(ofile, rt, curdepth, famc, fams, glob_map, "", 0, 1);

		while(  family )
		{
			mcount++;

			if( (husb = find_type(family, HUSB))
		 	&& (husb_rec = find_hash(husb->data))
			&& husb_rec != rt )
			{
				famc = find_type(rt, FAMC);
				output_pedigree_name(ofile, husb_rec, curdepth , famc, fams, glob_map, "<b>M.</b>", 0, 1);
			}
			if(  (wife = find_type(family, WIFE))
			 && (wife_rec = find_hash(wife->data))
		 	&& wife_rec != rt)
			{
				famc = find_type(rt, FAMC);
				output_pedigree_name(ofile, wife_rec, curdepth, famc, fams, glob_map,  "<b>M.</b>", 0, 1);
			}
			//We had a FAMS so print a Marriage line even if we don't have a date or place
			if(fams = find_next_this_type(rt, fams))
				setbit(glob_map, curdepth);

			print_bars(ofile, glob_map, curdepth);
			fprintf(ofile, "  ");
			if( marr = find_type(family, MARR) )
			{
				if( date = find_type(marr, DATE) )
					 fprintf(ofile, " %s", date->data);
				else
					 fprintf(ofile, " ?");
				if( plac = find_type(marr, PLAC) )
					fprintf(ofile, " at %s", plac->data);
				else
					fprintf(ofile, " at ?");
			}
			else
				fprintf(ofile, " ? at ?");
			fputc('\n', ofile);

			if((child = find_type(family, CHIL)) )
			{
				
				do
				{
					if((child_rec = find_hash(child->data)))
						output_decendants_info(ofile, child_rec, curdepth + 1, 0 , glob_map);
				}while(child = find_next_this_type(family, child));
				
			
			}
			if(fams)
			{
				clearbit(glob_map, curdepth );
				family = find_hash(fams->data);
			}
			else
				family = 0;
		}					
    }
}

void output_decendants_info_of_name
(
	FILE *ofile, 
	ged_type *rt,
	int curdepth,
	int direction,
	unsigned int *glob_map
)
{
ged_type *famc;
ged_type *fams;
ged_type *child;
ged_type *marr;
ged_type *date;
ged_type *plac;
ged_type *child_rec;
ged_type *family;
ged_type *husb, *wife;
ged_type *husb_rec, *wife_rec;
ged_type *sex;
int mcount = 0 ;

    if(rt) 
    {
    	if((fams = find_type(rt, FAMS))) //look for a spouse and family
			family = find_hash(fams->data);
		else
			family = 0;
		famc = find_type(rt, FAMC);
		
    	if(rt->processed == pass)
		{	//A loop has occured. Print the record with a * and return
			output_pedigree_name(ofile, rt, curdepth, famc, fams, glob_map, "*", 0, 1);
			return;
		}
			
		rt->processed = pass;
					
		output_pedigree_name(ofile, rt, curdepth, famc, fams, glob_map, "", 0, 1);

		while(  family )
		{
			mcount++;

			if( (husb = find_type(family, HUSB))
		 	&& (husb_rec = find_hash(husb->data))
			&& husb_rec != rt )
			{
				famc = find_type(rt, FAMC);
				output_pedigree_name(ofile, husb_rec, curdepth , famc, fams, glob_map, "<b>M.</b>", 0, 1);
			}
			if(  (wife = find_type(family, WIFE))
			 && (wife_rec = find_hash(wife->data))
		 	&& wife_rec != rt)
			{
				famc = find_type(rt, FAMC);
				output_pedigree_name(ofile, wife_rec, curdepth, famc, fams, glob_map,  "<b>M.</b>", 0, 1);
			}
			//We had a FAMS so print a Marriage line even if we don't have a date or place
			if(fams = find_next_this_type(rt, fams))
				setbit(glob_map, curdepth);

			print_bars(ofile, glob_map, curdepth);
			fprintf(ofile, "  ");
			if( marr = find_type(family, MARR) )
			{
				if( date = find_type(marr, DATE) )
					 fprintf(ofile, " %s", date->data);
				else
					 fprintf(ofile, " ?");
				if( plac = find_type(marr, PLAC) )
					fprintf(ofile, " at %s", plac->data);
				else
					fprintf(ofile, " at ?");
			}
			else
				fprintf(ofile, " ? at ?");
			fputc('\n', ofile);

			if( ((sex = find_type(rt, SEX)) && *sex->data == 'M') && (child = find_type(family, CHIL)) )
			{
				
				do
				{
					if((child_rec = find_hash(child->data)))
					{
						output_decendants_info_of_name(ofile, child_rec, curdepth + 1, 0, glob_map );
					}
				}while(child = find_next_this_type(family, child));
				
			
			}
			if(fams)
			{
				clearbit(glob_map , curdepth );
				family = find_hash(fams->data);
			}
			else
				family = 0;
		}					
    }
}

void output_pedigree_name
(
	FILE *ofile, 
	ged_type *indiv, 
	int depth, 
	ged_type *famc, 
	ged_type *fams, 
	unsigned int *map, 
	char *prefix,
	char *child_marker,
	int  direction
)
{
char *np;
int space = 0;
ged_type *name;
ged_type *birt;
ged_type *date;
char *b_date, *d_date;
ged_type *deat;
char *current_url;
char buff[32];
char buff2[32];
ged_type *title;
char *title_p;

	if(indiv)
	{
		clearbit(map, depth );
		print_bars(ofile, map, depth - 1);		
		print_lastbar(ofile, depth,  child_marker);
			
	    if((name = find_type(indiv, NAME)))
	    {
			np = name->data;
			if((title = find_type(name, TITL)))
				title_p = title->data;
			else
				title_p = "";
		}
	    else
	    {
			np = "";
			title_p = "";
		}
	    if((birt = find_type(indiv, BIRT)) && (date = find_type(birt, DATE)))
	    {
			b_date = date->data;
		}
	    else
			b_date = "?";
	    if((deat = find_type(indiv, DEAT)) && (date = find_type(deat, DATE)))
	    {
			d_date = date->data;
		}
	    else
			d_date = "?";
			
		fprintf(ofile, "<A NAME=\"%s\"><\A>", indiv->data); //Put a marker we can jump to
			
		if(fams)
			fprintf(ofile, "%s<b>%s</b>%s<A HREF=\"/html/%s.html\">%s</A>", prefix, title_p, 
					(*title_p ? " ":""), strip_ats(buff, fams->data), np);
		else if(famc)
			fprintf(ofile, "%s<b>%s</b>%s<A HREF=\"/html/%s.html#%s\">%s</A>", prefix,
					title_p, (*title_p ? " ":""), strip_ats(buff, famc->data), 
					strip_ats(buff2,indiv->data), np);
		else
			fprintf(ofile, "%s<b>%s</b>%s%s", prefix, title_p, (*title_p ? " ":""), np);
	    fprintf(ofile, " %s - %s\n", b_date, d_date);
	}
}

void print_bars(FILE *ofile, unsigned int *map, int depth)
{
int i;
	for(i = 1; i <= depth; i++)
		fprintf( ofile, "%*s", PEDIGREE_WIDTH, isbitset(map,i) ? "|" : " " );	
}

void print_lastbar(FILE *ofile, int depth, char *jump_point)
{
	if(depth)
	{
//		if(jump_point)
//			fprintf( ofile, "%*s<A href=\"#%s\">|</a>", PEDIGREE_WIDTH - 1, "", jump_point );	
//		else
			fprintf( ofile, "%*s", PEDIGREE_WIDTH - 1, "" );	
	}
}

